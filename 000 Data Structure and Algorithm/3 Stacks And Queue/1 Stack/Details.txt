Think of a stack like a pile of pancakes.

In a pile of pancakes, the pancakes are both added and removed from the top. So when removing a pancake, it will always be the last pancake you added. This way of organizing elements is called LIFO: Last In First Out.

Basic operations we can do on a stack are:
    isEmpty: Checks if the stack is empty.
    Size: Finds the number of elements in the stack.
    Peek: Returns the top element on the stack.
    Push: Adds a new element on the stack.
    Pop: Removes and returns the top element from the stack.

Reasons to implement stacks using arrays:
    Memory Efficient: Array elements do not hold the next elements address like linked list nodes do.
    Easier to implement and understand: Using arrays to implement stacks require less code than using linked lists, and for this reason it is typically easier to understand as well.

A reason for not using arrays to implement stacks:
    Fixed size: An array occupies a fixed part of the memory. This means that it could take up more memory than needed, or if the array fills up, it cannot hold more elements.