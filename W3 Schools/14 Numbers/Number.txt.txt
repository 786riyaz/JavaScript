https://www.w3schools.com/js/js_numbers.asp
=============================================================
JavaScript Numbers are Always 64-bit Floating Point

Value (aka Fraction/Mantissa)           :: 52 bits (0 - 51) 
Exponent                                :: 11 bits (52 - 62)
Sign                                    :: 1 bit (63)

let x = 999999999999999;   // x will be 999999999999999
let y = 9999999999999999;  // y will be 10000000000000000

The JavaScript interpreter works from left to right.
First 10 + 20 is added because x and y are both numbers.
Then 30 + "30" is concatenated because z is a string.

============================================================
NaN - Not a Number
NaN is a JavaScript reserved word indicating that a number is not a legal number.
Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number)

You can use the global JavaScript function isNaN() to find out if a value is a not a number

Example
let x = 100 / "Apple";
NaN is a number: typeof NaN returns number:
Example :: typeof NaN;

Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.

Hexadecimal
JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

Example :: 
let x = 0xFF;
==============================================================

By default, JavaScript displays numbers as base 10 decimals.
But you can use the toString() method to output numbers from base 2 to base 36.
Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.

Example
let myNumber = 32;
myNumber.toString(32);
myNumber.toString(16);
myNumber.toString(12);
myNumber.toString(10);
myNumber.toString(8);
myNumber.toString(2);
===============================================================
JavaScript Numbers as Objects
Normally JavaScript numbers are primitive values created from literals:

let x = 123;
But numbers can also be defined as objects with the keyword new:

let y = new Number(123);
Example
let x = 123;
let y = new Number(123)

===============================================================

In JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard).
With this standard, large integer cannot be exactly represented and will be rounded.
Because of this, JavaScript can only safely represent integers:
Up to 9007199254740991 +(253-1)
and
Down to -9007199254740991 -(253-1).
Integer values outside this range lose precision.

BigInt is the second numeric data type in JavaScript (after Number).

With BigInt the total number of supported data types in JavaScript is 8:

1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object

BigInt Operators
Operators that can be used on a JavaScript Number can also be used on a BigInt.

BigInt Multiplication Example
let x = 9007199254740995n;
let y = 9007199254740995n;
let z = x * y;

Arithmetic between a BigInt and a Number is not allowed (type conversion lose information).
Unsigned right shift (>>>) can not be done on a BigInt (it does not have a fixed width).

===============================================================
BigInt Decimals
A BigInt can not have decimals.

BigInt Division Example
let x = 5n;
let y = x / 2;
// Error: Cannot mix BigInt and other types, use explicit conversion.
let x = 5n;
let y = Number(x) / 2;
===============================================================
BigInt Hex, Octal and Binary
BigInt can also be written in hexadecimal, octal, or binary notation:

BigInt Hex Example
let hex = 0x20000000000003n;
let oct = 0o400000000000000003n;
let bin = 0b100000000000000000000000000000000000000000000000000011n;

===============================================================
Precision Curiosity
Rounding can compromise program security:

MAX_SAFE_INTEGER Example
9007199254740992 === 9007199254740993; // is true !!!