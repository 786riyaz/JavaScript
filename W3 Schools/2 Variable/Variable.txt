https://www.w3schools.com/js/js_variables.asp

Variables are containers for storing values.

The var keyword was used in all JavaScript code from 1995 to 2015.
The let and const keywords were added to JavaScript in 2015.
The var keyword should only be used in code written for older browsers.


When to Use var, let, or const?
1. Always declare variables
2. Always use const if the value should not be changed
3. Always use const if the type should not be changed (Arrays and Objects)
4. Only use let if you can't use const
5. Only use var if you MUST support old browsers.


All JavaScript variables must be identified with unique names.
These unique names are called identifiers.
Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).
The general rules for constructing names for variables (unique identifiers) are:
	Names can contain letters, digits, underscores, and dollar signs.
	Names must begin with a letter.
	Names can also begin with $ and _ (but we will not use it in this tutorial).
	Names are case sensitive (y and Y are different variables).
	Reserved words (like JavaScript keywords) cannot be used as names.
	
After the declaration, the variable has no value (technically it is undefined).
To assign a value to the variable, use the equal sign

Re-Declaring JavaScript Variables
If you re-declare a JavaScript variable declared with var, it will not lose its value.
The variable carName will still have the value "Volvo" after the execution of these statements:
	Example ::: 
	var carName = "Volvo";
	var carName;
	
Block Scope
Before ES6 (2015), JavaScript did not have Block Scope.
JavaScript had Global Scope and Function Scope.
ES6 introduced the two new JavaScript keywords: let and const.
These two keywords provided Block Scope in JavaScript:

Global Scope
Variables declared with the var always have Global Scope.
Variables declared with the var keyword can NOT have block scope:

Redeclaration
Variables defined with let can not be redeclared.
You can not accidentally redeclare a variable declared with let.
Variables defined with var can be redeclared.

What is Good?
let and const have block scope.
let and const can not be redeclared.
let and const must be declared before use.
let and const does not bind to this.
let and const are not hoisted.

What is Not Good?
var does not have to be declared.
var is hoisted.
var binds to this.
---------------------------------------------------------------------------
Difference Between var, let and const
		Scope	Redeclare	Reassign	Hoisted	Binds this
var		No		Yes			Yes			Yes		Yes
let		Yes		No			Yes			No		No
const	Yes		No			No			No		No

--------------------------------------------------------------------------
Let Hoisting
Variables defined with var are hoisted to the top and can be initialized at any time.
Meaning: You can use the variable before it is declared: